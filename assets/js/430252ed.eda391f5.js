"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[996],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>g});var o=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,i=function(e,n){if(null==e)return{};var t,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=o.createContext({}),p=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=p(e.components);return o.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(t),g=i,m=d["".concat(l,".").concat(g)]||d[g]||c[g]||r;return t?o.createElement(m,a(a({ref:n},u),{},{components:t})):o.createElement(m,a({ref:n},u))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,a=new Array(r);a[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var p=2;p<r;p++)a[p]=t[p];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7371:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var o=t(7462),i=(t(7294),t(3905));const r={sidebar_position:2},a="Client API plugins",s={unversionedId:"client/plugins",id:"client/plugins",title:"Client API plugins",description:"Zodios client has a powerfull plugin system. You can attach a plugin to all your API calls or to a specific API call.",source:"@site/docs/client/plugins.md",sourceDirName:"client",slug:"/client/plugins",permalink:"/docs/client/plugins",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Client API instance",permalink:"/docs/client/"},next:{title:"React hooks",permalink:"/docs/client/react"}},l={},p=[{value:"Fetch plugin",id:"fetch-plugin",level:2},{value:"Authorization with Token plugin",id:"authorization-with-token-plugin",level:2},{value:"Use a plugin only for some endpoints",id:"use-a-plugin-only-for-some-endpoints",level:2},{value:"Override plugin",id:"override-plugin",level:2},{value:"Plugin execution order",id:"plugin-execution-order",level:2},{value:"Write your own plugin",id:"write-your-own-plugin",level:2}],u={toc:p};function c(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"client-api-plugins"},"Client API plugins"),(0,i.kt)("p",null,"Zodios client has a powerfull plugin system. You can attach a plugin to all your API calls or to a specific API call."),(0,i.kt)("h2",{id:"fetch-plugin"},"Fetch plugin"),(0,i.kt)("p",null,"Axios is using XHR on the browser. This might be a showstopper for your application, because XHR lacks some options of ",(0,i.kt)("inlineCode",{parentName:"p"},"fetch")," you might rely on.",(0,i.kt)("br",{parentName:"p"}),"\n","For those use cases, you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"fetch")," plugin that implements an axios adapter using the standard fetch.  "),(0,i.kt)("admonition",{title:"\ud83d\udea7 Warning \ud83d\udea7**",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"It's worth noting, that you should not use the ",(0,i.kt)("inlineCode",{parentName:"p"},"fetch")," plugin on nodejs. Indeed, fetch lacks a lot of features on backend side and you should use axios default http adapter for node (default). If you still want to use fetch on your backend, you should use a polyfill, zodios does not provide one.   "),(0,i.kt)("p",{parentName:"admonition"}," Do not open an issue for ",(0,i.kt)("inlineCode",{parentName:"p"},"fetch")," support on ",(0,i.kt)("inlineCode",{parentName:"p"},"nodejs")," unless you are willing to add support for it with a PR at the same time. I might reconsider this position in the future when fetch becomes feature complete on nodejs.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'import { pluginFetch } from "@zodios/plugins";\n\napiClient.use(pluginFetch({\n  // all fetch options are supported\n  keepAlive: true,\n}));\n')),(0,i.kt)("h2",{id:"authorization-with-token-plugin"},"Authorization with Token plugin"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"@zodios/plugins")," comes with a plugin to inject and renew your tokens :"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"  import { pluginToken } from '@zodios/plugins';\n\n  apiClient.use(pluginToken({\n    getToken: async () => \"token\"\n  }));\n")),(0,i.kt)("h2",{id:"use-a-plugin-only-for-some-endpoints"},"Use a plugin only for some endpoints"),(0,i.kt)("p",null,"Zodios plugin system is much like the middleware system of ",(0,i.kt)("inlineCode",{parentName:"p"},"express"),". This means you can apply a plugin to a specific endpoint or to all endpoints."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'  import { pluginToken } from \'@zodios/plugins\';\n\n  // apply a plugin by alias\n  apiClient.use("getUser", pluginToken({\n    getToken: async () => "token"\n  }));\n  // apply a plugin by endpoint\n  apiClient.use("get","/users/:id", pluginToken({\n    getToken: async () => "token"\n  }));\n')),(0,i.kt)("h2",{id:"override-plugin"},"Override plugin"),(0,i.kt)("p",null,"Zodios plugins can be named and can be overridden.\nHere are the list of integrated plugins that are used by zodios by default :"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"zodValidationPlugin : validation of response schema with zod library"),(0,i.kt)("li",{parentName:"ul"},"formDataPlugin : convert provided body object to ",(0,i.kt)("inlineCode",{parentName:"li"},"multipart/form-data")," format"),(0,i.kt)("li",{parentName:"ul"},"formURLPlugin : convert provided body object to ",(0,i.kt)("inlineCode",{parentName:"li"},"application/x-www-form-urlencoded")," format")),(0,i.kt)("p",null,"For example, you can override internal 'zod-validation' plugin with your own validation plugin :"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"  import { zodValidationPlugin } from '@zodios/core';\n  import { myValidationInterceptor } from './my-custom-validation';\n \n  apiClient.use({\n    name: zodValidationPlugin().name, // using the same name as an already existing plugin will override it\n    response: myValidationInterceptor,\n  });\n")),(0,i.kt)("h2",{id:"plugin-execution-order"},"Plugin execution order"),(0,i.kt)("p",null,"Zodios plugins that are not attached to an endpoint are executed first.\nThen plugins that match your endpoint are executed.\nIn addition, plugins are executed in their declaration order for requests, and in reverse order for responses."),(0,i.kt)("p",null,"example, ",(0,i.kt)("inlineCode",{parentName:"p"},"pluginLog")," logs the message it takes as parameter when it's called :"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'  apiClient.use("getUser", pluginLog(\'2\'));\n  apiClient.use(pluginLog(\'1\'));\n  apiClient.use("get","/users/:id", pluginLog(\'3\'));\n\n  apiClient.get("/users/:id", { params: { id: 7 } });\n\n  // output :\n  // request 1 \n  // request 2\n  // request 3\n  // response 3\n  // response 2\n  // response 1\n')),(0,i.kt)("h2",{id:"write-your-own-plugin"},"Write your own plugin"),(0,i.kt)("p",null,"Zodios plugins are middleware interceptors for requests and responses.\nIf you want to create your own, they should have the following signature :  "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"export type ZodiosPlugin = {\n  /**\n   * Optional name of the plugin\n   * naming a plugin allows to remove it or replace it later\n   */\n  name?: string;\n  /**\n   * request interceptor to modify or inspect the request before it is sent\n   * @param api - the api description\n   * @param request - the request config\n   * @returns possibly a new request config\n   */\n  request?: (\n    api: ZodiosEnpointDescriptions,\n    config: AnyZodiosRequestOptions\n  ) => Promise<AnyZodiosRequestOptions>;\n  /**\n   * response interceptor to modify or inspect the response before it is returned\n   * @param api - the api description\n   * @param config - the request config\n   * @param response - the response\n   * @returns possibly a new response\n   */\n  response?: (\n    api: ZodiosEnpointDescriptions,\n    config: AnyZodiosRequestOptions,\n    response: AxiosResponse\n  ) => Promise<AxiosResponse>;\n  /**\n   * error interceptor for response errors\n   * there is no error interceptor for request errors\n   * @param api - the api description\n   * @param config - the config for the request\n   * @param error - the error that occured\n   * @returns possibly a new response or a new error\n   */\n  error?: (\n    api: ZodiosEnpointDescriptions,\n    config: AnyZodiosRequestOptions,\n    error: Error\n  ) => Promise<AxiosResponse>;\n};\n")))}c.isMDXComponent=!0}}]);