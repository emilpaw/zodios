"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[981],{3905:(e,t,o)=>{o.d(t,{Zo:()=>p,kt:()=>m});var n=o(7294);function s(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function r(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){s(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function i(e,t){if(null==e)return{};var o,n,s=function(e,t){if(null==e)return{};var o,n,s={},a=Object.keys(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||(s[o]=e[o]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(s[o]=e[o])}return s}var l=n.createContext({}),u=function(e){var t=n.useContext(l),o=t;return e&&(o="function"==typeof e?e(t):r(r({},t),e)),o},p=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var o=e.components,s=e.mdxType,a=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=u(o),m=s,k=d["".concat(l,".").concat(m)]||d[m]||c[m]||a;return o?n.createElement(k,r(r({ref:t},p),{},{components:o})):n.createElement(k,r({ref:t},p))}));function m(e,t){var o=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=o.length,r=new Array(a);r[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:s,r[1]=i;for(var u=2;u<a;u++)r[u]=o[u];return n.createElement.apply(null,r)}return n.createElement.apply(null,o)}d.displayName="MDXCreateElement"},1689:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>c,frontMatter:()=>a,metadata:()=>i,toc:()=>u});var n=o(7462),s=(o(7294),o(3905));const a={sidebar_position:3},r="React hooks",i={unversionedId:"client/react",id:"client/react",title:"React hooks",description:"Zodios comes with a Query and Mutation hook helper.",source:"@site/docs/client/react.md",sourceDirName:"client",slug:"/client/react",permalink:"/docs/client/react",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Client API plugins",permalink:"/docs/client/plugins"},next:{title:"Zodios server",permalink:"/docs/category/zodios-server"}},l={},u=[{value:"Zodios Hooks instance",id:"zodios-hooks-instance",level:2},{value:"Zodios methods",id:"zodios-methods",level:2},{value:"<code>hooks.use[Alias]</code>",id:"hooksusealias",level:3},{value:"query alias:",id:"query-alias",level:4},{value:"mutation alias",id:"mutation-alias",level:4},{value:"<code>zodios.useQuery</code>",id:"zodiosusequery",level:3},{value:"<code>zodios.useMutation</code>",id:"zodiosusemutation",level:3},{value:"<code>zodios.useGet</code>",id:"zodiosuseget",level:3},{value:"<code>zodios.usePost</code>",id:"zodiosusepost",level:3},{value:"<code>zodios.usePut</code>",id:"zodiosuseput",level:3},{value:"<code>zodios.usePatch</code>",id:"zodiosusepatch",level:3},{value:"<code>zodios.useDelete</code>",id:"zodiosusedelete",level:3},{value:"Example",id:"example",level:2}],p={toc:u};function c(e){let{components:t,...o}=e;return(0,s.kt)("wrapper",(0,n.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"react-hooks"},"React hooks"),(0,s.kt)("p",null,"Zodios comes with a Query and Mutation hook helper.",(0,s.kt)("br",{parentName:"p"}),"\n","It's a thin wrapper around React-Query but with zodios auto completion."),(0,s.kt)("p",null,"Zodios query hook also returns an invalidation helper to allow you to reset react query cache easily"),(0,s.kt)("h2",{id:"zodios-hooks-instance"},"Zodios Hooks instance"),(0,s.kt)("p",null,"When creating an instance or zodios hooks, you need to provide a name that will be used as ",(0,s.kt)("inlineCode",{parentName:"p"},"react-query")," key prefix and your instance of Zodios Api Client.  "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"new ZodiosHook(name: string, client: Zodios)\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Example")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'const apiClient = new Zodios(baseUrl, [...]);\nconst apiHooks = new ZodiosHooks("myAPI", apiClient);\n')),(0,s.kt)("h2",{id:"zodios-methods"},"Zodios methods"),(0,s.kt)("h3",{id:"hooksusealias"},(0,s.kt)("inlineCode",{parentName:"h3"},"hooks.use[Alias]")),(0,s.kt)("p",null,"You will usually want to use aliases to call your endpoints. You can define them in the ",(0,s.kt)("inlineCode",{parentName:"p"},"alias")," option in your API definition endpoint."),(0,s.kt)("h4",{id:"query-alias"},"query alias:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"function use[Alias](config?: ZodiosRequestOptions, reactQueryOptions: ReactQueryOptions): ReactQueryResult<Response>;\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"example"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'// identical to hooks.useGet("/users")\nconst { data: users, isLoading, isError } =  hooks.useGetUsers();\n')),(0,s.kt)("h4",{id:"mutation-alias"},"mutation alias"),(0,s.kt)("p",null,"Alias for ",(0,s.kt)("inlineCode",{parentName:"p"},"post"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"put"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"patch"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"delete")," endpoints:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"function use[Alias](config?: ZodiosRequestOptions, reactQueryOptions?: ReactQueryOptions): ReactMutationResult<Response>;\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"example"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'// identical to usePost("/users") or useMutation("post","/users")\nconst { mutate } = hooks.useCreateUser();\n\n')),(0,s.kt)("h3",{id:"zodiosusequery"},(0,s.kt)("inlineCode",{parentName:"h3"},"zodios.useQuery")),(0,s.kt)("p",null,"Generic request method that allows to do queries (same as useGet)."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"useQuery(path: string, config?: ZodiosRequestOptions, reactQueryOptions?: ReactQueryOptions): ReactQueryResult<Response>;\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Example"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"const { data: users, isLoading, isError } = hooks.useQuery('/users');\n")),(0,s.kt)("h3",{id:"zodiosusemutation"},(0,s.kt)("inlineCode",{parentName:"h3"},"zodios.useMutation")),(0,s.kt)("p",null,"Generic request method that allows to do mutations."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"useMutation(method: string, path: string, config: ZodiosRequestOptions, reactQueryOptions?: ReactQueryOptions): ReactMutationResult<Response>;\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Example"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"const { mutate } = hooks.useMutation('post','/users');\n")),(0,s.kt)("h3",{id:"zodiosuseget"},(0,s.kt)("inlineCode",{parentName:"h3"},"zodios.useGet")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"useGet(path: string, config?: ZodiosRequestOptions, reactQueryOptions?: ReactQueryOptions): ReactQueryResult<Response>;\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Example"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'const { data: user, isLoading, isError } = hooks.useGet("/users/:id", { params: { id: 1 } });\n')),(0,s.kt)("h3",{id:"zodiosusepost"},(0,s.kt)("inlineCode",{parentName:"h3"},"zodios.usePost")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"usePost(path: string, config?: ZodiosRequestOptions, reactQueryOptions?: ReactQueryOptions): ReactMutationResult<Response>;\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Example"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'const { mutate } = hooks.usePost("/users");\n')),(0,s.kt)("h3",{id:"zodiosuseput"},(0,s.kt)("inlineCode",{parentName:"h3"},"zodios.usePut")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"usePut(path: string, config?: ZodiosRequestOptions, reactQueryOptions?: ReactQueryOptions): ReactMutationResult<Response>;\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Example"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'const { mutate } = hooks.usePut("/users/:id", { params: { id: 1 } });\n')),(0,s.kt)("h3",{id:"zodiosusepatch"},(0,s.kt)("inlineCode",{parentName:"h3"},"zodios.usePatch")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"usePatch(path: string, config?: ZodiosRequestOptions, reactQueryOptions?: ReactQueryOptions): ReactMutationResult<Response>;\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Example"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'const { mutate } = hooks.usePatch("/users/:id", {params: {id: 1}});\n')),(0,s.kt)("h3",{id:"zodiosusedelete"},(0,s.kt)("inlineCode",{parentName:"h3"},"zodios.useDelete")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"useDelete(path: string, config?: ZodiosRequestOptions, reactQueryOptions?: ReactQueryOptions): ReactMutationResult<Response>;\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Example"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'const { mutate } = hooks.useDelete("/users/:id", { params: {id: 1 }});\n')),(0,s.kt)("h2",{id:"example"},"Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="users.tsx"',title:'"users.tsx"'},'import React from "react";\nimport { Zodios } from "@zodios/core";\nimport { ZodiosHooks } from "@zodios/react";\nimport { z } from "zod";\n\nconst baseUrl = "https://jsonplaceholder.typicode.com";\nconst zodios = new Zodios(baseUrl, [...]);\nconst zodiosHooks = new ZodiosHooks("jsonplaceholder", zodios);\n\nconst Users = () => {\n  const {\n    data: users,\n    isLoading,\n    error,\n    invalidate: invalidateUsers, // zodios also provides invalidation helpers\n  } = zodiosHooks.useQuery("/users"); // or useGetUsers();\n  const { mutate } = zodiosHooks.useMutation("post", "/users", undefined, {\n    onSuccess: () => invalidateUsers(),\n  }); // or .useCreateUser(...);\n\n  return (\n    <>\n      <h1>Users</h1>\n      <button onClick={() => mutate({ name: "john doe" })}>add user</button>\n      {isLoading && <div>Loading...</div>}\n      {error && <div>Error: {(error as Error).message}</div>}\n      {users && (\n        <ul>\n          {users.map((user) => (\n            <li key={user.id}>{user.name}</li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="root.tsx"',title:'"root.tsx"'},'import { QueryClient, QueryClientProvider } from "react-query";\nimport { Users } from "./users";\n\nconst queryClient = new QueryClient();\n\nexport const App = () => {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <Users />\n    </QueryClientProvider>\n  );\n};\n')))}c.isMDXComponent=!0}}]);