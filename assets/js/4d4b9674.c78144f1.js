"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[770],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),l=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),u=l(n),m=a,f=u["".concat(i,".").concat(m)]||u[m]||c[m]||o;return n?r.createElement(f,s(s({ref:t},d),{},{components:n})):r.createElement(f,s({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=u;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p.mdxType="string"==typeof e?e:a,s[1]=p;for(var l=2;l<o;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4454:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>p,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:1},s="Zodios Application",p={unversionedId:"server/express-app",id:"server/express-app",title:"Zodios Application",description:"A Zodios application is a simple adapter for Express. It's an express instance but with full typesafety and autocompletion.",source:"@site/docs/server/express-app.md",sourceDirName:"server",slug:"/server/express-app",permalink:"/docs/server/express-app",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Zodios server",permalink:"/docs/category/zodios-server"},next:{title:"Zodios Router",permalink:"/docs/server/express-router"}},i={},l=[{value:"<code>zodiosApp</code>",id:"zodiosapp",level:2},{value:"Options",id:"options",level:3},{value:"Examples",id:"examples",level:2},{value:"Express Application",id:"express-application",level:3},{value:"Error Handling",id:"error-handling",level:3}],d={toc:l};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"zodios-application"},"Zodios Application"),(0,a.kt)("p",null,"A Zodios application is a simple adapter for ",(0,a.kt)("a",{parentName:"p",href:"https://expressjs.com/"},"Express"),". It's an express instance but with full typesafety and autocompletion."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"For more information on how to use express, check out the ",(0,a.kt)("a",{parentName:"p",href:"https://expressjs.com/"},"Express documentation"))),(0,a.kt)("h2",{id:"zodiosapp"},(0,a.kt)("inlineCode",{parentName:"h2"},"zodiosApp")),(0,a.kt)("p",null,"To upgrade an existing express application with typesafety, replace your ",(0,a.kt)("inlineCode",{parentName:"p"},"express()")," calls to ",(0,a.kt)("inlineCode",{parentName:"p"},"zodiosApp(api)")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"function zodiosApp(api?: ZodiosEndpointDescriptions, options?: ZodiosAppOptions): ZodiosApp\n")),(0,a.kt)("h3",{id:"options"},"Options"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Property"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"express"),(0,a.kt)("td",{parentName:"tr",align:null},"Express>"),(0,a.kt)("td",{parentName:"tr",align:null},"optional express instance - default to express()")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"enableJsonBodyParser"),(0,a.kt)("td",{parentName:"tr",align:null},"boolean"),(0,a.kt)("td",{parentName:"tr",align:null},"enable json body parser - default to true")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"validate"),(0,a.kt)("td",{parentName:"tr",align:null},"boolean"),(0,a.kt)("td",{parentName:"tr",align:null},"enable zod input validation - default to true")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"transform"),(0,a.kt)("td",{parentName:"tr",align:null},"boolean"),(0,a.kt)("td",{parentName:"tr",align:null},"enable zod input transformation - default to false")))),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("h3",{id:"express-application"},"Express Application"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="/src/server/app.ts"',title:'"/src/server/app.ts"'},'import { zodiosApp } from "@zodios/express";\nimport { userApi } from "../../common/api";\n\n// just an express adapter that is aware of  your api, app is just an express app with type annotations and validation middlewares\nconst app = zodiosApp(userApi);\n\n//  auto-complete path  fully typed and validated input params (body, query, path, header)\n//          \u25bc           \u25bc    \u25bc\napp.get("/users/:id", (req, res) => {\n  // res.json is typed thanks to zod\n  res.json({\n    //   auto-complete req.params.id\n    //              \u25bc\n    id: req.params.id,\n    name: "John Doe",\n  });\n})\n\napp.listen(3000);\n')),(0,a.kt)("h3",{id:"error-handling"},"Error Handling"),(0,a.kt)("p",null,"Zodios express can infer the status code to match your API error response and also have your errors correctly typed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="/src/server/app.ts"',title:'"/src/server/app.ts"'},'import { asApi } from "@zodios/core";\nimport { zodiosApp } from "@zodios/express";\nimport { z } from "zod";\n\nconst userApi = asApi([\n  {\n    method: "get",\n    path: "/users/:id",\n    alias: "getUser",\n    description: "Get a user",\n    response: z.object({\n      id: z.number(),\n      name: z.string(),\n    }),\n    errors: [\n      {\n        status: 404,\n        response: z.object({\n          code: z.string(),\n          message: z.string(),\n          id: z.number(),\n        }),\n      }, {\n        status: \'default\', // default status code will be used if error is not 404\n        response: z.object({\n          code: z.string(),\n          message: z.string(),\n        }),\n      },\n    ],\n  },\n]);\n\nconst app = zodiosApp(userApi);\napp.get("/users/:id", (req, res) => {\n  try {\n    const id = +req.params.id;\n    const user = service.findUser(id);\n    if(!user) {\n      // match error 404 schema with auto-completion\n      res.status(404).json({\n        code: "USER_NOT_FOUND",\n        message: "User not found",\n        id, // compile time error if you forget to add id\n      });\n    } else {\n      // match response schema with auto-completion\n      res.json(user);\n    }\n  } catch(err) {\n    // match default error schema with auto-completion\n    res.status(500).json({\n      code: "INTERNAL_ERROR",\n      message: "Internal error",\n    });\n  }\n})\n\napp.listen(3000);\n')))}c.isMDXComponent=!0}}]);